// <copyright file="ContactPreOperationCreate.cs" company="">
// Copyright (c) 2018 All Rights Reserved
// </copyright>
// <author></author>
// <date>2/22/2018 11:57:10 AM</date>
// <summary>Implements the ContactPreOperationCreate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using System.ServiceModel;
using CrmCalculations;
using CrmEarlyBound;
using Microsoft.Xrm.Sdk;

namespace DynaInduction.Plugins
{

    /// <summary>
    /// ContactPreOperationCreate Plugin.
    /// </summary>    
    public class ContactPreOperationCreate: PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactPreOperationCreate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public ContactPreOperationCreate(string unsecure, string secure)
            : base(typeof(ContactPreOperationCreate))
        {
            
           // TODO: Implement your custom configuration handling.
        }


        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }

      IPluginExecutionContext context = localContext.PluginExecutionContext;
      ITracingService trace = localContext.TracingService;

      if (context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity)
      {
        trace.Trace("1");
        Entity entity = (Entity)context.InputParameters["Target"];
        trace.Trace("2");
        Contact contact = entity.ToEntity<Contact>();
        trace.Trace("3");
        try
        {
          trace.Trace("4");
          Calculations calc = new Calculations();
          trace.Trace("5");
          contact.di_age = calc.CalculateAge(contact, null);
          trace.Trace("6");
          contact.di_EsitimatedReturnFinal = calc.CalculateEstReturn(contact, null);
          trace.Trace("7");
          contact.di_maturity_date = calc.CalculateMaturityDate(contact, null);
          trace.Trace("8");
        }
        catch (Exception ex)
        {
          throw new InvalidPluginExecutionException("An error occured in the plugin:", ex);
        }

      }
    }
    }
}
